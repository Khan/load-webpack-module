
const loadedChunks = new Set();

const _createLoadModuleFn = (chunkMap) =>
    (moduleId) => new Promise((resolve, reject) => {
        if (!chunkMap.hasOwnProperty(moduleId)) {
            reject(`${moduleId} not found`);
        }

        const chunkId = chunkMap[moduleId];
        const unloadedChunks = chunkMap[moduleId].filter(chunk => !loadedChunks.has(chunk));

        Promise.all(unloadedChunks.map(__webpack_chunk_load__)).then(() => {
            for (const chunk of unloadedChunks) {
                loadedChunks.add(chunk);
            }
            resolve(__webpack_require__(moduleId));
        })
    });

// Return a function that can be used to load modules from webpack bundles.
// `moduleChunkDepsJsonPath` should point to a .json file generated by
// ModuleChunkDepsPlugin.
const createLoadModuleFn = (moduleChunkDepsJsonPath) => 
    fetch(moduleChunkDepsJsonPath)
        .then(res => res.json())
        .then((chunkMap) => _createLoadModuleFn(chunkMap));

export {createLoadModuleFn};
